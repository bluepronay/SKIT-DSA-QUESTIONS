// this is link list question

#include<stdio.h>
#include<stdlib.h>

struct node{
	int info;
	struct node *link;
};
struct node *head,*ptr,*pre,*info,*temp;
void create(){
	int val;
    printf("Enter the Element : ");
    scanf("%d",&val);
    if(head->link==NULL){

    temp=(struct node *)malloc(sizeof(struct node));
	temp->info=val;
	temp->link=NULL;
	head->link=temp;
	}
	else{
		ptr = head->link; // Set ptr to point to the second node
        while (ptr->link != NULL) {
            ptr = ptr->link;
        }
        // Allocate memory for temp after reaching the last node
        temp = (struct node *)malloc(sizeof(struct node));
        temp->info = val;
        temp->link = NULL;
        ptr->link = temp;

	}
}
insertfirst(){
	int val;
    printf("Enter the Element : ");
    scanf("%d",&val);
	temp=(struct node *)malloc(sizeof(struct node));
	temp->info=val;
	temp->link=head->link;
	head->link=temp;
}

void insertlast() {
	int val;
    printf("Enter the Element : ");
    scanf("%d",&val);
    if (head == NULL) {
        // If the list is empty, create the initial node using the create function
        create();
    } else {
        ptr = head->link; // Set ptr to point to the second node
        while (ptr->link != NULL) {
            ptr = ptr->link;
        }
        // Allocate memory for temp after reaching the last node
        temp = (struct node *)malloc(sizeof(struct node));
        temp->info = val;
        temp->link = NULL;
        ptr->link = temp; // Add the new node after the last node
    }
}
void insertbet(){
	int val;
    printf("Enter the Element : ");
    scanf("%d",&val);
	int pos;
	printf("Enter the position : ");
	scanf("%d",&pos);
	if (head == NULL) {
        // If the list is empty, create the initial node using the create function
        create();
    } else{
    	ptr=head->link;
    	int p=1;
    	while(p!=pos){
    		pre=ptr;
    		ptr=ptr->link;
    		p++;
		}temp = (struct node *)malloc(sizeof(struct node));
		temp->info = val;
		temp->link = ptr;
		pre->link=temp;
	}

}
deletefirst(){
	if(head==NULL&&head->link==NULL){
		printf("Link List is Empty....\n");
	}
	else{

	ptr=head->link;
	head->link=ptr->link;
	free(ptr);
}
}
deletelast(){
	if(head==NULL&&head->link==NULL){
		printf("Link List is Empty....\n");
	}
	else{

	ptr=head->link;
	while (ptr->link != NULL) {
		pre=ptr;
        ptr = ptr->link;
        }
        pre->link=NULL;	
        free(ptr);
}
}
deletebet(){
	if(head==NULL&&head->link==NULL){
		printf("Link List is Empty....\n");
	}else{

	int pos;
	printf("Enter the position : ");
	scanf("%d",&pos);
	ptr=head->link;
	int p=1;
	while(p!=pos){
	pre=ptr;
	ptr=ptr->link;
	p++;
	}
	pre->link=ptr->link;
	free(ptr);
}
}
printlist(){
	if(head==NULL&&head->link==NULL){
		printf("Link List is Empty....\n");
	}
	else{
	printf("Present List is : ");
	ptr = head->link;
    while (ptr != NULL) {
    printf("%d ", ptr->info);
    ptr = ptr->link;
    }	
}
printf("\n");
}




int main(){
	head=(struct node *)malloc(sizeof(struct node));
	head->link=NULL;
	head->info=NULL;
	int ch;
	do{
		printf("\n\n\t\t\tLINK LIST MENU\n");
		printf("1.Create a Node\n");
		printf("2.Insert a Node at First\n");
		printf("3.Insert a Node in between\n");
		printf("4.Insert a Node at last\n");
		printf("5.Delete First Node\n");
		printf("6.Delete a Node in between\n");
		printf("7.Delete the Last Node\n");
		printf("8.Print the Link List\n");
		printf("9.Exit...\n");
		printf("Your Choice : ");
		scanf("%d",&ch);
		switch(ch){
			case 1 : create();
			        printlist();
			break;
			case 2 : insertfirst();
			printlist();
			break;
			case 3 : insertbet();
			printlist();
			break;
			case 4 : insertlast();
			printlist();
			break;
			case 5 : deletefirst();
			printlist();
			break;
			case 6 : deletebet();
			printlist();
			break;
			case 7 : deletelast();
			printlist();
			break;
			case 8 : printlist();
			break;
			case 9 : printf("Exiting...");
			break;
			default : printf("Invalid Input...");
		}

	}while(ch!=9);
	return 0;
}












// Doubly Link List.....

#include <stdio.h>
#include <stdlib.h>
#include <conio.h>
struct node
{
    int info;
    struct node *pre;
    struct node *nex;
};

struct node *head, *prev, *ptr, *temp;
void insertlast();

void create()
{
    if (head->nex == NULL)
    {
        int val;
        printf("Enter the element : ");
        scanf("%d", &val);
        temp = (struct node *)malloc(sizeof(struct node));
        temp->info = val;
        temp->nex = NULL;
        temp->pre = head;
        head->nex = temp;
    }
    else
    {
        insertlast();
    }
}
void insertfirst()
{
    if (head->nex == NULL)
    {
        create();
    }
    else
    {
        int val;
        printf("Enter the element : ");
        scanf("%d", &val);
        ptr = head->nex;
        temp = (struct node *)malloc(sizeof(struct node));
        temp->info = val;
        temp->nex = ptr;
        ptr->pre = temp;
        temp->pre = head;
        head->nex = temp;
    }
}

void print()
{
    if (head->nex == NULL)
    {
        printf("Link List is Empty....\n");
    }
    else
    {
        ptr = head->nex;
        while (ptr != NULL)
        {
            printf("%d\t", ptr->info);
            ptr = ptr->nex;
        }
    }
    getch();
    printf("\n");
}

void insertlast()
{
    if (head->nex == NULL)
    {
        create();
    }
    else
    {
        int val;
        printf("Enter the element : ");
        scanf("%d", &val);
        ptr = head->nex;
        while (ptr->nex != NULL)
        {
            ptr = ptr->nex;
        }
        temp = (struct node *)malloc(sizeof(struct node));
        temp->info = val;
        temp->nex = NULL;
        temp->pre = ptr;
        ptr->nex = temp;
    }
}
void insertbet()
{
    if (head->nex == NULL)
    {
        printf("Link List is Empty....\n");
        getch();
    }
    else
    {
        int val, pos;
        printf("Enter the element : ");
        scanf("%d", &val);
        printf("Enter the position : ");
        scanf("%d", &pos);

        if (pos < 1)
        {
            printf("Invalid position\n");
            return;
        }

        int p = 1;
        ptr = head->nex;
        prev = head;

        while (p != pos && ptr != NULL)
        {
            prev = ptr;
            ptr = ptr->nex;
            p++;
        }

        temp = (struct node *)malloc(sizeof(struct node));
        temp->info = val;
        temp->nex = ptr;

        if (ptr != NULL)
        {
            temp->pre = prev;
            prev->nex = temp;
            ptr->pre = temp;
        }
        else
        {
            temp->pre = prev;
            prev->nex = temp;
        }
    }
}

void delfirst()
{
    if (head->nex == NULL)
    {
        printf("Link List is Empty....\n");
    }
    else
    {
        ptr = head->nex;
        head->nex = ptr->nex;
        ptr->nex->pre = head;
        free(ptr);
    }
}

void dellast()
{
    if (head->nex == NULL)
    {
        printf("Link List is Empty....\n");
    }
    else
    {
        ptr = head->nex;
        while (ptr->nex != NULL)
        {
            prev = ptr;
            ptr = ptr->nex;
        }
        prev->nex = NULL;
        free(ptr);
    }
}

void delbet()
{
    if (head->nex == NULL)
    {
        printf("Link List is Empty....\n");
        getch();
    }
    else
    {
        int pos;
        printf("Enter the position you want to delete : ");
        scanf("%d", &pos);

        if (pos < 1)
        {
            printf("Invalid position\n");
            return;
        }

        int p = 1;
        ptr = head->nex;
        prev = head;

        while (p != pos && ptr != NULL)
        {
            prev = ptr;
            ptr = ptr->nex;
            p++;
        }

        if (ptr != NULL)
        {
            prev->nex = ptr->nex;

            if (ptr->nex != NULL)
            {
                ptr->nex->pre = prev;
            }

            free(ptr);
        }
        else
        {
            printf("Position not found\n");
        }
    }
}

void rev()
{
    if (head->nex == NULL)
    {
        printf("Link List is Empty...");
    }
    ptr = head->nex;
    while (ptr->nex != NULL)
    {
        ptr = ptr->nex;
    }
    while (ptr != head)
    {
        printf("%d\t", ptr->info);
        ptr = ptr->pre;
    }
}

int main()
{
    head = (struct node *)malloc(sizeof(struct node));
    head->info = NULL;
    head->nex = NULL;
    head->pre = NULL;

    int ch;
    do
    {
        printf("\n\n\t\t\tDOUBLY LINK LIST MENU\n");
        printf("1.Create a Node\n");
        printf("2.Insert a Node at First\n");
        printf("3.Insert a Node in between\n");
        printf("4.Insert a Node at last\n");
        printf("5.Delete First Node\n");
        printf("6.Delete a Node in between\n");
        printf("7.Delete the Last Node\n");
        printf("8.Print the Link List\n");
        printf("9.Print the Reverse Link List\n");
        printf("10.Exit...\n");
        printf("Your Choice : ");
        scanf("%d", &ch);
        switch (ch)
        {
        case 1:
            create();
            print();
            break;
        case 2:
            insertfirst();
            print();
            break;
        case 3:
            insertbet();
            print();
            break;
        case 4:
            insertlast();
            print();
            break;
        case 5:
            delfirst();
            print();
            break;
        case 6:
            delbet();
            print();
            break;
        case 7:
            dellast();
            print();
            break;
        case 8:
            print();
            break;
        case 9:
            rev();
            break;
        case 10:
            printf("Exiting...");
            exit(1);
            break;
        default:
            printf("Invalid Input...");
        }

    } while (ch != 10);

    return 0;
}








// This is Circular Link List

#include<stdio.h>
#include<stdlib.h>

struct node{
	int info;
	struct node *link;
};
struct node *head,*ptr,*temp,*pre;

void insertlast();

void create(){
	if(head->link==NULL){
	    int val;
	    printf("Enter the value : ");
	    scanf("%d",&val);
		temp=(struct node*)malloc(sizeof(struct node));
		temp->info=val;
		temp->link=head;
		head->link=temp;
	}
	else{
        insertlast();
	}
}
void print(){
	if(head->link==NULL){
		printf("Cicular Link List is Empty....");
	}
	else{
		printf("Present Link List is \n");
		ptr=head->link;
		while(ptr!=head){
			printf("%d\t",ptr->info);
			ptr=ptr->link;
		}
	}printf("\n");
}
void insertfirst(){
	if(head->link==NULL){
		create();
	}
	else{
		int val;
	    printf("Enter the value : ");
	    scanf("%d",&val);
		temp=(struct node*)malloc(sizeof(struct node));
	    temp->info=val;
	    temp->link=head->link;
	    head->link=temp;
	}
}
void insertlast(){
	if(head->link==NULL){
		create();
	}
	else{
		int val;
	    printf("Enter the value : ");
	    scanf("%d",&val);
	    ptr=head->link;
		while(ptr->link!=head){
		ptr=ptr->link;
		}
		temp=(struct node*)malloc(sizeof(struct node));
		temp->info=val;
		temp->link=head;
		ptr->link=temp;	
	}
}

void insertbet(){
	if(head->link==NULL){
		printf("Circular Link List is Empty...");
	}
	else{
		int val,pos;
		printf("Enter the element : ");
		scanf("%d",&val);
		printf("Enter the position : ");
		scanf("%d",&pos);
		if (pos < 1) {
        printf("Invalid position\n");
        return;
        }
        int p=1;
        ptr=head->link;
        while(p!=pos&&ptr->link!=NULL){
        	pre=ptr;
        	p++;
        	ptr=ptr->link;
		}temp=(struct node*)malloc(sizeof(struct node));
		temp->info=val;
		temp->link=ptr;
		pre->link=temp;
	}
}

void delfirst(){
	if(head->link==NULL){
		printf(" Circular Link List is Empty...");
	}
	else{
		ptr=head->link;
		head->link=ptr->link;
		free(ptr);
	}
}
void dellast(){
	if(head->link==NULL){
		printf(" Circular Link List is Empty...");
	}
	else{
		ptr=head->link;
		while(ptr->link!=head){
			pre=ptr;
			ptr=ptr->link;
		}
		pre->link=head;
		free(ptr);
	}	
}

void delbet(){
	if(head->link==NULL){
		printf(" Circular Link List is Empty...");
	}
	else{
		int pos;
		printf("Enter the required position to delete : ");
		scanf("%d",&pos);
		ptr=head->link;
		int p=1;
		while(ptr->link!=head&&p!=pos){
			pre=ptr;
			p++;
			ptr=ptr->link;
		}pre->link=ptr->link;
		free(ptr);
	}
}







int main(){
	head=(struct node*)malloc(sizeof(struct node));
	head->info=0;
	head->link=NULL;
	int ch;
	do{
		printf("\n\n\t\t\tCIRCULAR LINK LIST MENU\n");
		printf("1.Create a Node\n");
		printf("2.Insert a Node at First\n");
		printf("3.Insert a Node in between\n");
		printf("4.Insert a Node at last\n");
		printf("5.Delete First Node\n");
		printf("6.Delete a Node in between\n");
		printf("7.Delete the Last Node\n");
		printf("8.Print the Link List\n");
		printf("9.Exit...\n");
		printf("Your Choice : ");
		scanf("%d",&ch);
		switch(ch){
			case 1 : create();
			        print();
			break;
			case 2 : insertfirst();
			print();
			break;
			case 3 : insertbet();
			print();
			break;
			case 4 : insertlast();
			print();
			break;
			case 5 : delfirst();
			print();
			break;
			case 6 : delbet();
			print();
			break;
			case 7 : dellast();
			print();
			break;
			case 8 : print();
			break;
			case 9 : printf("Exiting...");
			         exit(1);
			break;
			default : printf("Invalid Input...");
		}
		
	}while(ch!=10);
	
	return 0;
}
